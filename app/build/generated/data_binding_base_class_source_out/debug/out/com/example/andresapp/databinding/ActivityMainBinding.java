// Generated by view binder compiler. Do not edit!
package com.example.andresapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.andresapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button datePickerButton;

  @NonNull
  public final Button deleteButton;

  @NonNull
  public final Button getTasks;

  @NonNull
  public final RecyclerView mRecyclerView;

  @NonNull
  public final Button saveButton;

  @NonNull
  public final EditText taskEdit;

  @NonNull
  public final Button timePickerButton;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull Button datePickerButton,
      @NonNull Button deleteButton, @NonNull Button getTasks, @NonNull RecyclerView mRecyclerView,
      @NonNull Button saveButton, @NonNull EditText taskEdit, @NonNull Button timePickerButton) {
    this.rootView = rootView;
    this.datePickerButton = datePickerButton;
    this.deleteButton = deleteButton;
    this.getTasks = getTasks;
    this.mRecyclerView = mRecyclerView;
    this.saveButton = saveButton;
    this.taskEdit = taskEdit;
    this.timePickerButton = timePickerButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.datePickerButton;
      Button datePickerButton = ViewBindings.findChildViewById(rootView, id);
      if (datePickerButton == null) {
        break missingId;
      }

      id = R.id.deleteButton;
      Button deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.getTasks;
      Button getTasks = ViewBindings.findChildViewById(rootView, id);
      if (getTasks == null) {
        break missingId;
      }

      id = R.id.mRecyclerView;
      RecyclerView mRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (mRecyclerView == null) {
        break missingId;
      }

      id = R.id.saveButton;
      Button saveButton = ViewBindings.findChildViewById(rootView, id);
      if (saveButton == null) {
        break missingId;
      }

      id = R.id.taskEdit;
      EditText taskEdit = ViewBindings.findChildViewById(rootView, id);
      if (taskEdit == null) {
        break missingId;
      }

      id = R.id.timePickerButton;
      Button timePickerButton = ViewBindings.findChildViewById(rootView, id);
      if (timePickerButton == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, datePickerButton, deleteButton,
          getTasks, mRecyclerView, saveButton, taskEdit, timePickerButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
